
    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                               Psi4 1.2.1 release

                         Git: Rev {HEAD} 406f4de 


    R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,
    A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,
    R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,
    H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,
    P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,
    F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,
    J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).
    (doi: 10.1021/acs.jctc.7b00174)


                         Additional Contributions by
    P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, and R. A. Shaw

    -----------------------------------------------------------------------


    Psi4 started on: Thursday, 07 March 2019 11:16AM

    Process ID: 23249
    Host:       daniel-XPS-13-9370
    PSIDATADIR: /usr/local/psi4/share/psi4
    Memory:     500.0 MiB
    Threads:    1
    
  ==> Input File <==

--------------------------------------------------------------------------
"""This is a template for psi4 input format."""
import numpy
import sys

from openfermion.config import *
from openfermion.hamiltonians import MolecularData
from openfermion.ops import general_basis_change

from numpy import array

sys.path.append('/home/daniel/anaconda3/envs/vqe_git/lib/python3.6/site-packages/openfermionpsi4-0.4-py3.6.egg/openfermionpsi4')
from _psi4_conversion_functions import *


# Set memory that job can use in megabytes.
memory 8000 mb

# Initialize molecular data.
_description = ''
if _description == 'None':
    _description = None
molecule = MolecularData([('H', (0, 0, 1.0)), ('H', (0, 0, 2.0)), ('H', (0, 0, 3.0)), ('H', (0, 0, 4.0))],
                         'sto-3g',
                         1,
                         0,
                         'rhf',
                         _description,
                          filename='psi4_0.790543248714')

# Set molecular geometry and symmetry.
molecule mol {
H 0 0 1.0
H 0 0 2.0
H 0 0 3.0
H 0 0 4.0
symmetry c1
}
mol.set_multiplicity(1)
mol.set_molecular_charge(0)

# Set reference and guess.
if molecule.multiplicity == 1:
    set reference rhf
    set guess sad
else:
    #set reference rohf
    set guess gwh

# Set global parameters of calculation.
set globals {
    basis sto-3g
    freeze_core false
    fail_on_maxiter True
    df_scf_guess false
    opdm true
    tpdm true
    soscf false
    scf_type pk
    maxiter 1e6
    num_amps_print 1e6
    r_convergence 1e-6
    d_convergence 1e-6
    e_convergence 1e-6
    ints_tolerance EQUALITY_TOLERANCE
    damping_percentage 0
    reference rhf 
}

# Run self-consistent field (SCF) calculation.
if 1:
    try:
        hf_energy, hf_wavefunction = energy('scf', return_wfn=True)
        if False:
            print('Hartree-Fock energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, hf_energy))
    except:
        if False:
            print('WARNING: SCF calculation failed.')
        else:
            raise
    finally:
        # Get orbitals and Fock matrix.
        molecule.hf_energy = hf_energy
        molecule.nuclear_repulsion = mol.nuclear_repulsion_energy()
        molecule.canonical_orbitals = numpy.asarray(hf_wavefunction.Ca())
        molecule.overlap_integrals = numpy.asarray(hf_wavefunction.S())
        molecule.n_orbitals = molecule.canonical_orbitals.shape[0]
        molecule.n_qubits = 2 * molecule.n_orbitals
        molecule.orbital_energies = numpy.asarray(hf_wavefunction.epsilon_a())
        molecule.fock_matrix = numpy.asarray(hf_wavefunction.Fa())

        # Get integrals using MintsHelper.
        mints = MintsHelper(hf_wavefunction.basisset())
        molecule.one_body_integrals = general_basis_change(
            numpy.asarray(mints.ao_kinetic()), molecule.canonical_orbitals, (1, 0))
        molecule.one_body_integrals += general_basis_change(
            numpy.asarray(mints.ao_potential()), molecule.canonical_orbitals, (1, 0))
        two_body_integrals = numpy.asarray(mints.ao_eri())
        two_body_integrals.reshape((molecule.n_orbitals, molecule.n_orbitals,
                                    molecule.n_orbitals, molecule.n_orbitals))
        two_body_integrals = numpy.einsum('psqr', two_body_integrals)
        two_body_integrals = general_basis_change(
            two_body_integrals, molecule.canonical_orbitals, (1, 1, 0, 0))
        molecule.two_body_integrals = two_body_integrals
        molecule.save()


# Perform MP2 energy calculation if there are at least two electrons.
if 0:
    try:
        assert molecule.n_electrons > 1
        mp2_energy = energy('mp2')
        if False:
            print('MP2 energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, mp2_energy))
    except:
        if False:
            print('WARNING: MP2 calculation failed.')
        else:
            raise
    else:
        molecule.mp2_energy = mp2_energy
        molecule.save()


# Perform configuration interaction singles and doubles (CISD) calculation.
if 0:
    set qc_module detci
    try:
        cisd_energy, cisd_wavefunction = energy('cisd', return_wfn=True)
        if False:
            print('CISD energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, cisd_energy))
    except:
        if False:
            print('WARNING: CISD calculation failed.')
        else:
            raise
    else:
        # For the functions below, "a" and "b" refer to "up and "down" spins.
        molecule.cisd_energy = cisd_energy

        # Get 1-RDM from CISD calculation.
        cisd_one_rdm_a = numpy.array(cisd_wavefunction.get_opdm(
            0, 0, 'A', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)
        cisd_one_rdm_b = numpy.array(cisd_wavefunction.get_opdm(
            0, 0, 'B', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)

        # Get 2-RDM from CISD calculation.
        cisd_two_rdm_aa = numpy.array(cisd_wavefunction.get_tpdm(
            'AA', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        cisd_two_rdm_ab = numpy.array(cisd_wavefunction.get_tpdm(
            'AB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        cisd_two_rdm_bb = numpy.array(cisd_wavefunction.get_tpdm(
            'BB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)

        # Get overall RDMs.
        cisd_one_rdm, cisd_two_rdm = unpack_spatial_rdm(
            cisd_one_rdm_a, cisd_one_rdm_b, cisd_two_rdm_aa,
            cisd_two_rdm_ab, cisd_two_rdm_bb)

        # Store 1-RDM in molecule file, 2-RDM separately in other file.
        molecule.cisd_one_rdm = cisd_one_rdm
        molecule.cisd_two_rdm = cisd_two_rdm
        molecule.save()


# Perform exact diagonalization.
if 1:
    set qc_module detci
    try:
        fci_energy, fci_wavefunction = energy('fci', return_wfn=True)
        if False:
            print('FCI energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, fci_energy))
    except:
        if False:
            print('WARNING: FCI calculation failed.')
        else:
            raise
    finally:
        # For the functions below, "a" and "b" refer to "up and "down" spins.
        molecule.fci_energy = fci_energy

        # Get 1-RDM from FCI calculation.
        fci_one_rdm_a = numpy.array(fci_wavefunction.get_opdm(
            0, 0, 'A', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)
        fci_one_rdm_b = numpy.array(fci_wavefunction.get_opdm(
            0, 0, 'B', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)

        # Get 2-RDM from FCI calculation.
        fci_two_rdm_aa = numpy.array(fci_wavefunction.get_tpdm(
            'AA', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        fci_two_rdm_ab = numpy.array(fci_wavefunction.get_tpdm(
            'AB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        fci_two_rdm_bb = numpy.array(fci_wavefunction.get_tpdm(
            'BB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)

        # Get overall RDMs.
        fci_one_rdm, fci_two_rdm = unpack_spatial_rdm(
            fci_one_rdm_a, fci_one_rdm_b,
            fci_two_rdm_aa, fci_two_rdm_ab, fci_two_rdm_bb)

        # Store 1-RDM in molecule file, 2-RDM separately in other file.
        molecule.fci_one_rdm = fci_one_rdm
        molecule.fci_two_rdm = fci_two_rdm
        molecule.save()


# Perform coupled cluster singles and doubles (CCSD) calculation.
if 0:
    set qc_module ccenergy
    try:
        ccsd_energy = energy('ccsd')
        if False:
            print('CCSD energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, ccsd_energy))
    except:
        if False:
            print('WARNING: CCSD calculation failed.')
        else:
            raise
    else:
        molecule.ccsd_energy = ccsd_energy

        # Merge CC amplitudes into molecule by parsing
        psi_filename = outfile_name()
        single_cc_amplitudes, double_cc_amplitudes = (
            parse_psi4_ccsd_amplitudes(
                2 * molecule.n_orbitals,
                molecule.get_n_alpha_electrons(),
                molecule.get_n_beta_electrons(),
                psi_filename))

        molecule.ccsd_single_amps = single_cc_amplitudes
        molecule.ccsd_double_amps = double_cc_amplitudes
        molecule.save()
--------------------------------------------------------------------------

  Memory set to   7.451 GiB by Python driver.

*** tstart() called on daniel-XPS-13-9370
*** at Thu Mar  7 11:16:24 2019

   => Loading Basis Set <=

    Name: STO-3G
    Role: ORBITAL
    Keyword: BASIS
    atoms 1-4 entry H          line    19 file /usr/local/psi4/share/psi4/basis/sto-3g.gbs 


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, Andy Simmonett
                             and Daniel Smith
                              RHF Reference
                        1 Threads,   7629 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c1
    Full point group: D_inf_h

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z               Mass       
    ------------   -----------------  -----------------  -----------------  -----------------
         H            0.000000000000     0.000000000000    -1.500000000000     1.007825032070
         H            0.000000000000     0.000000000000    -0.500000000000     1.007825032070
         H            0.000000000000     0.000000000000     0.500000000000     1.007825032070
         H            0.000000000000     0.000000000000     1.500000000000     1.007825032070

  Running in c1 symmetry.

  Rotational constants: A = ************  B =      3.34535  C =      3.34535 [cm^-1]
  Rotational constants: A = ************  B = 100291.02055  C = 100291.02055 [MHz]
  Nuclear repulsion =    2.293101237223333

  Charge       = 0
  Multiplicity = 1
  Electrons    = 4
  Nalpha       = 2
  Nbeta        = 2

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS enabled.
  MOM disabled.
  Fractional occupation disabled.
  Guess Type is SAD.
  Energy threshold   = 1.00e-06
  Density threshold  = 1.00e-06
  Integral threshold = 0.00e+00

  ==> Primary Basis <==

  Basis Set: STO-3G
    Blend: STO-3G
    Number of shells: 4
    Number of basis function: 4
    Number of Cartesian functions: 4
    Spherical Harmonics?: true
    Max angular momentum: 0

  ==> Pre-Iterations <==

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A          4       4       0       0       0       0
   -------------------------------------------------------
    Total       4       4       2       2       2       0
   -------------------------------------------------------

  ==> Integral Setup <==

  Using in-core PK algorithm.
   Calculation information:
      Number of atoms:                   4
      Number of AO shells:               4
      Number of primitives:             12
      Number of atomic orbitals:         4
      Number of basis functions:         4

      Integral cutoff                 1.00e-12
      Number of threads:                 1

  Performing in-core PK
  Using 110 doubles for integral storage.
  We computed 55 shell quartets total.
  Whereas there are 55 unique shell quartets.

  ==> DiskJK: Disk-Based J/K Matrices <==

    J tasked:                  Yes
    K tasked:                  Yes
    wK tasked:                  No
    Memory (MB):              5722
    Schwarz Cutoff:          1E-12

    OpenMP threads:              1

  Minimum eigenvalue in the overlap matrix is 2.9596611939E-01.
  Using Symmetric Orthogonalization.

  SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.

  ==> Iterations <==

                        Total Energy        Delta E     RMS |[F,P]|

   @RHF iter   0:    -1.39315643182788   -1.39316e+00   7.19620e-03 
   @RHF iter   1:    -2.09501075058945   -7.01854e-01   1.40882e-02 
   @RHF iter   2:    -2.09826171519635   -3.25096e-03   3.60762e-03 DIIS/DAMP
   @RHF iter   3:    -2.09854109726084   -2.79382e-04   4.91210e-04 DIIS/DAMP
   @RHF iter   4:    -2.09854593540647   -4.83815e-06   1.21580e-06 DIIS/DAMP
   @RHF iter   5:    -2.09854593543066   -2.41958e-11   4.95641e-09 DIIS/DAMP

  ==> Post-Iterations <==

    Orbital Energies [Eh]
    ---------------------

    Doubly Occupied:                                                      

       1A     -0.623342     2A     -0.382544  

    Virtual:                                                              

       3A      0.296600     4A      0.865755  

    Final Occupation by Irrep:
              A 
    DOCC [     2 ]

  Energy converged.

  @RHF Final Energy:    -2.09854593543066

   => Energetics <=

    Nuclear Repulsion Energy =              2.2931012372233335
    One-Electron Energy =                  -6.7715225121293976
    Two-Electron Energy =                   2.3798753394754000
    Total Energy =                         -2.0985459354306641



Properties will be evaluated at   0.000000,   0.000000,   0.000000 [a0]

Properties computed using the SCF density matrix

  Nuclear Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:     0.0000

  Electronic Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:    -0.0000

  Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:    -0.0000     Total:     0.0000

  Dipole Moment: [D]
     X:     0.0000      Y:     0.0000      Z:    -0.0000     Total:     0.0000


*** tstop() called on daniel-XPS-13-9370 at Thu Mar  7 11:16:24 2019
Module time:
	user time   =       0.28 seconds =       0.00 minutes
	system time =       0.01 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
Total time:
	user time   =       0.28 seconds =       0.00 minutes
	system time =       0.01 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on daniel-XPS-13-9370
*** at Thu Mar  7 11:16:24 2019

   => Loading Basis Set <=

    Name: STO-3G
    Role: ORBITAL
    Keyword: BASIS
    atoms 1-4 entry H          line    19 file /usr/local/psi4/share/psi4/basis/sto-3g.gbs 


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, Andy Simmonett
                             and Daniel Smith
                              RHF Reference
                        1 Threads,   7629 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c1
    Full point group: D_inf_h

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z               Mass       
    ------------   -----------------  -----------------  -----------------  -----------------
         H            0.000000000000     0.000000000000    -1.500000000000     1.007825032070
         H            0.000000000000     0.000000000000    -0.500000000000     1.007825032070
         H            0.000000000000     0.000000000000     0.500000000000     1.007825032070
         H            0.000000000000     0.000000000000     1.500000000000     1.007825032070

  Running in c1 symmetry.

  Rotational constants: A = ************  B =      3.34535  C =      3.34535 [cm^-1]
  Rotational constants: A = ************  B = 100291.02055  C = 100291.02055 [MHz]
  Nuclear repulsion =    2.293101237223333

  Charge       = 0
  Multiplicity = 1
  Electrons    = 4
  Nalpha       = 2
  Nbeta        = 2

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS enabled.
  MOM disabled.
  Fractional occupation disabled.
  Guess Type is SAD.
  Energy threshold   = 1.00e-06
  Density threshold  = 1.00e-06
  Integral threshold = 0.00e+00

  ==> Primary Basis <==

  Basis Set: STO-3G
    Blend: STO-3G
    Number of shells: 4
    Number of basis function: 4
    Number of Cartesian functions: 4
    Spherical Harmonics?: true
    Max angular momentum: 0

  ==> Pre-Iterations <==

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A          4       4       0       0       0       0
   -------------------------------------------------------
    Total       4       4       2       2       2       0
   -------------------------------------------------------

  ==> Integral Setup <==

  Using in-core PK algorithm.
   Calculation information:
      Number of atoms:                   4
      Number of AO shells:               4
      Number of primitives:             12
      Number of atomic orbitals:         4
      Number of basis functions:         4

      Integral cutoff                 1.00e-12
      Number of threads:                 1

  Performing in-core PK
  Using 110 doubles for integral storage.
  We computed 55 shell quartets total.
  Whereas there are 55 unique shell quartets.

  ==> DiskJK: Disk-Based J/K Matrices <==

    J tasked:                  Yes
    K tasked:                  Yes
    wK tasked:                  No
    Memory (MB):              5722
    Schwarz Cutoff:          1E-12

    OpenMP threads:              1

  Minimum eigenvalue in the overlap matrix is 2.9596611939E-01.
  Using Symmetric Orthogonalization.

  SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.

  ==> Iterations <==

                        Total Energy        Delta E     RMS |[F,P]|

   @RHF iter   0:    -1.39315643182788   -1.39316e+00   7.19620e-03 
   @RHF iter   1:    -2.09501075058945   -7.01854e-01   1.40882e-02 
   @RHF iter   2:    -2.09826171519635   -3.25096e-03   3.60762e-03 DIIS/DAMP
   @RHF iter   3:    -2.09854109726084   -2.79382e-04   4.91210e-04 DIIS/DAMP
   @RHF iter   4:    -2.09854593540647   -4.83815e-06   1.21580e-06 DIIS/DAMP
   @RHF iter   5:    -2.09854593543066   -2.41958e-11   4.95641e-09 DIIS/DAMP

  ==> Post-Iterations <==

    Orbital Energies [Eh]
    ---------------------

    Doubly Occupied:                                                      

       1A     -0.623342     2A     -0.382544  

    Virtual:                                                              

       3A      0.296600     4A      0.865755  

    Final Occupation by Irrep:
              A 
    DOCC [     2 ]

  Energy converged.

  @RHF Final Energy:    -2.09854593543066

   => Energetics <=

    Nuclear Repulsion Energy =              2.2931012372233335
    One-Electron Energy =                  -6.7715225121293976
    Two-Electron Energy =                   2.3798753394754000
    Total Energy =                         -2.0985459354306641



Properties will be evaluated at   0.000000,   0.000000,   0.000000 [a0]

Properties computed using the SCF density matrix

  Nuclear Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:     0.0000

  Electronic Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:    -0.0000

  Dipole Moment: [e a0]
     X:     0.0000      Y:     0.0000      Z:    -0.0000     Total:     0.0000

  Dipole Moment: [D]
     X:     0.0000      Y:     0.0000      Z:    -0.0000     Total:     0.0000


*** tstop() called on daniel-XPS-13-9370 at Thu Mar  7 11:16:24 2019
Module time:
	user time   =       0.20 seconds =       0.00 minutes
	system time =       0.00 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
Total time:
	user time   =       0.50 seconds =       0.01 minutes
	system time =       0.01 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of threads:                 1
      Number of atoms:                   4
      Number of AO shells:               4
      Number of SO shells:               4
      Number of primitives:             12
      Number of atomic orbitals:         4
      Number of basis functions:         4

      Number of irreps:                  1
      Integral cutoff                 0.00e+00
      Number of functions per irrep: [   4 ]

 OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals
         stored in file 35.

      Computing two-electron integrals...done
      Computed 55 non-zero two-electron integrals.
        Stored in file 33.


         ---------------------------------------------------------
                          Configuration Interaction
                            (a 'D E T C I' module)

                 C. David Sherrill, Daniel G. A. Smith, and
                              Matt L. Leininger
         ---------------------------------------------------------


   ==> Parameters <==

    EX LEVEL       =        4      H0 BLOCKSIZE  =     1000
    VAL EX LEVEL   =        0      H0 GUESS SIZE =     1000
    H0COUPLINGSIZE =        0      H0 COUPLING   =       NO
    MAXITER        =       24      NUM PRINT     =       20
    NUM ROOTS      =        1      ICORE         =        1
    PRINT LVL      =        1      FCI           =      YES
    R CONV         = 1.00e-06      MIXED         =      YES
    E CONV         = 1.00e-06      MIXED4        =      YES
    R4S            =       NO      REPL OTF      =       NO
    DIAG METHOD    =      SEM      FOLLOW ROOT   =        0
    PRECONDITIONER = DAVIDSON      UPDATE        = DAVIDSON
    S              =   0.0000      Ms0           =      YES
    GUESS VECTOR   =  H0BLOCK      OPENTYPE      =     NONE
    COLLAPSE SIZE  =        1      HD AVG        = EVANGELISTI
    MAX NUM VECS   =       25      REF SYM       =     AUTO
    IOPEN        =       NO

    EX ALLOW       =  1  1  1  1 
    STATE AVERAGE  =  0(1.00) 

   ==> CI Orbital and Space information <==

   ------------------------------------
               Space    Total     A
   ------------------------------------
                 Nso        4     4
                 Nmo        4     4
               Ndocc        2     2
               Nsocc        0     0
   ------------------------------------
              CI Spaces
   ------------------------------------
        Dropped DOCC        0     0
              Active        4     4
        Dropped UOCC        0     0
   ------------------------------------

   ==> Setting up CI strings <==

    There are 6 alpha and 6 beta strings
    The CI space requires 36 (3.60E+01) determinants and 1 blocks

   ==> Transforming CI integrals <==

	Presorting SO-basis two-electron integrals.
	Sorting File: SO Ints (nn|nn) nbuckets = 1
	Transforming the one-electron integrals and constructing Fock matrices
	Starting first half-transformation.
	Sorting half-transformed integrals.
	First half integral transformation complete.
	Starting second half-transformation.
	Two-electron integral transformation complete.

   ==> Starting CI iterations <==

    H0 Block Eigenvalue =  -2.16638745

    Simultaneous Expansion Method (Block Davidson Method)
    Using 1 initial trial vectors

     Iter   Root       Total Energy       Delta E      C RMS

   @CI  0:     0     -2.166387447634   -4.4595E+00   2.2726E-15  
    Warning: Norm of correction (root 0) is < 1.0E-13
   @CI  1:     0     -2.166387447634   0.0000E+00   3.2772E-15 c

   ==> Energetics <==

    SCF energy =           -2.098545935430664
    Total CI energy =      -2.166387447634348

   ==> FCI root 0 information <==

    FCI Root 0 energy =    -2.166387447634348

   The 20 most important determinants:

    *   1   -0.967711  (    0,    0)  1AX 2AX 
    *   2    0.187688  (    1,    1)  1AX 3AX 
    *   3   -0.078923  (    2,    3)  1AB 2AA 3AA 4AB 
    *   4   -0.078923  (    3,    2)  1AA 2AB 3AB 4AA 
    *   5    0.065003  (    2,    2)  2AX 3AX 
    *   6    0.052038  (    4,    4)  2AX 4AX 
    *   7   -0.048612  (    1,    4)  1AA 2AB 3AA 4AB 
    *   8   -0.048612  (    4,    1)  1AB 2AA 3AB 4AA 
    *   9    0.041698  (    3,    3)  1AX 4AX 
    *  10    0.030312  (    0,    5)  1AA 2AA 3AB 4AB 
    *  11    0.030312  (    5,    0)  1AB 2AB 3AA 4AA 
    *  12   -0.021663  (    5,    5)  3AX 4AX 
    *  13   -0.005759  (    0,    2)  1AA 2AX 3AB 
    *  14   -0.005759  (    2,    0)  1AB 2AX 3AA 
    *  15   -0.004410  (    0,    3)  1AX 2AA 4AB 
    *  16   -0.004410  (    3,    0)  1AX 2AB 4AA 
    *  17    0.003710  (    3,    5)  1AA 3AB 4AX 
    *  18    0.003710  (    5,    3)  1AB 3AA 4AX 
    *  19    0.002625  (    2,    5)  2AA 3AX 4AB 
    *  20    0.002625  (    5,    2)  2AB 3AX 4AA 

		 "A good bug is a dead bug" 

			 - Starship Troopers

		 "I didn't write FORTRAN.  That's the problem."

			 - Edward Valeev

    Psi4 stopped on: Thursday, 07 March 2019 11:16AM
    Psi4 wall time for execution: 0:00:01.47

*** Psi4 exiting successfully. Buy a developer a beer!
